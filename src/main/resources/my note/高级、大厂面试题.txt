什么是JVM
JVM是java虚拟机，通过ClassLoader类加载器加载成字节码文件，一次编译到处执行，跨平台性强

简述一下JVM加载Class文件原理
通过ClassLoader类加载器加载，有4种类加载器，当应用程序加载器加载类时，首先不会自己去加载，而是向上询问是否已加载，
即双亲委派机制

4大类加载器
启动类加载器（Bootstrap ClassLoader）：加载java核心类库；
扩展类加载器（Extansion ClassLoader）：加载java扩展类库；
应用程序加载器（Application ClassLoader）：加载用户写的类；
自定义类加载器：通过继承ClassLoader

GC过程
Young GC：new对象存放在新生代中，当新生代中Eden区满了会触发GC，把有引用的对象复制到Survial0然后Eden区清空，
当Eden区再次GC时，会将Eden区和Survial0有引用的对象复制到Survial1然后Eden区和Survial0清空，之后每次GC都是往空
的Survial区复制，Survial区满或对象年龄达到限制（默认15），对象就会被复制到老年代；
老年代满了会触发full GC，young GC和full GC会产生STW，STW会停止除GC任务外的一切任务

常见的垃圾回收算法有哪些？
引用计数法（JVM已废除）：通过将有引用的对象做累加统计，把没有引用的对象清除，有内存碎片；
复制算法：新生代的回收算法，没有内存碎片；
标记清除、标记整理：老年代回收算法，有内存碎片

常见的垃圾回收方式（垃圾回收器）有哪些？
串行回收器：使用单个线程进行垃圾回收且用户线程暂停，新生代和老年代各一个，它们配套使用；
并行回收器（java8默认）：使用多线程进行垃圾回收且用户线程暂停，新生代有两种并行回收器，一个和老年代串行回收器配套（java6），
另一个是和老年代并行配套（java8）；
并发标记清除（CMS）：用户线程和垃圾回收线程同时执行，GC停顿时间短适用于对响应速度有要求的场景，但会增加CPU消耗
和有内存碎片，属于老年代的回收器；
G1（java9默认）：横跨新生代和老年代，将堆内存分割成不同的小区块并发进行垃圾回收，效率高、没有内存碎片，
并且它有专门的区来存放大对象，它还能设置GC停顿时间；
ZGC（java11）

什么是GC Roots？
GC Roots是可达性分析的对象起点，从这个起点开始，链路能到达的对象表示可达，判定为存活，否则
判定死亡

哪些对象可以成为GC Roots
虚拟机栈局部变量引用的对象；
本地方法栈引用的对象；
类的静态变量、常量引用的对象；
异常对象

什么是JMM？
JMM是java内存模型，它并不真实存在，是线程级别的工作内存，用于对变量的操作

排查故障的方式有哪些？
查看Linux日志；
开发工具Dubug调试；
开发工具终端jps、jstack命令查看java堆栈信息

JVM常用XX参数
-XX:+PrintGCDetails：打印GC收集细节；
-XX:MetaspaceSize：设置元空间大小；
-XX:MaxTenuringThreshold：设置新生代到老年代的年龄条件（默认15）；
-XX:InitialHeapSize（-Xms）：设置初始堆内存，默认物理内存1/64；
-XX:MaxHeapSize（-Xmx）：设置最大堆内存，默认物理内存1/4；
-XX:ThreadStackSize（-Xss）：设置线程栈大小，默认值是0，0表示JDK为系统（Linux、macOS或Windows）设置的默认大小是1024kb
-XX:MaxDirectMemorySize：设置最大直接内存大小；
-XX:+UseG1GC：设置为G1垃圾回收器；
-Xmn：设置设置年轻代大小，默认堆内存的1/3；
-XX:SurvivorRatio：设置Eden区在年轻代的比例，默认8:1:1；
-XX:NewRatatio：设置老年代在堆内存的比例，默认2:1
通过Idea终端jps命令和jinfo命令查看参数值

查看进程参数：jinfo -flags 进程id
查看初始参数：java -XX:+PrintFlagsInitial
查看最终参数：java -XX:+PrintFlagsFinal
=表示没改过
:=表示人为改过或JVM改过

JVM参数调优模板
-XX:+PrintGCDetails -XX:+PrintCommandLineFlags -Xms2048m -Xmx2048m -XX:MetaspaceSize=512m -XX:MaxDirectMemorySize=512m

结合SpringBoot实现JVM调优
nohup java -server 需要优化的参数 -jar jar包名

Linux服务器线程数上限调优
ulimit -u命令查看线程数上限
/etc/security/limits.d/目录下nproc.conf可以根据用户设置线程数上限

4大引用类型有哪些？
强引用：直接new对象，即使发生了OOM也不会被GC回收；
软引用：用SoftReference，发生了OOM才会被GC回收；
弱引用：用WeakReference，发生GC就会被回收；
虚引用：PhantomReference和ReferenceQueue联合使用，发生GC会被放入引用队列
软、弱引用可用于高速缓存场景，既保证了读取速度又不占内存

常见的错误有哪些？
StackOverflowError：栈溢出；
OOM类错误：
java heap space堆内存不足、
Metaspace元空间不足、
GC overhead limit exceeded过度垃圾回收（垃圾回占用98%资源）、
Direct buffer memory直接内存不足、
unable to create new native thread线程创建超出系统限制

什么是JUC？
JUC是java并发工具包，它存在于jdk的rj.jar中，它包含atomic包和locks包，
atomic包提供了具有原子型操作的类，通过CAS机制实现，
locks包提供了一些锁的实现，底层是AQS抽象队列同步器

什么是AQS
AQS是抽象队列同步器，是JUClocks包的类，用于阻塞没有获取锁的线程，将没有获取锁的线程设置节点状态放到队列，
当一个线程释放锁后，队列里的线程会再次尝试获取锁，里面用了getState()获取节点状态，CAS、setState()修改节点
状态，它提供了独占锁和共享锁的获取方法

volatile关键字的特性
多线程中，保证数据可见性和禁止指令重排，不保证原子性

什么是AtomicInteger？
AtomicInteger是JUC中atomic包的原子整型类，底层是CAS，同时也用volatile关键字让它有可见性

什么是CAS？
CAS是比较并交换，非阻塞的同步实现方式，是unsafe类的方法，通过内存地址偏移量、期望值、修改值来完成数据的同步修改

为什么用CAS而不用synchronized？
因为synchronized虽然保证了数据的原子性，但是它性能低于CAS，CAS不用上锁，通过循环判断
（自旋）来保证数据原子性，因为是自旋，避免了频繁的唤醒线程和避免阻塞，所以提高了性能，
但循环时间长了会增加CPU消耗

CAS缺点
循环时间长的话CPU开销大、只能保证一个数据的原子性

什么是ABA问题？
ABA问题发生在当一个线程比另一个线程结束的要快的时候，这个更快结束的线程就能修改一次数据再改回去，这个时候另一个县城正好
到修改这一步，发现值没变，于是顺利修改，但其实值是做过修改的，这种情况有些场景可能不希望发生

怎么解决ABA问题？
用带版本号的原子对象引用AtomicStampReference可以解决ABA问题

集合线程安全问题
List、Set、Map都是线程不安全的，因为它们的add()、put()都没有synchronizeed
解决线程不安全的办法有：
1、List集合可以用Vector、Set集合可以用HashTable、Map集合可以用ConcurrentHashMap
2、可以用Collections集合类的synchronizedList、synchronizedSet和synchronizedMap
3、可以用写时复制方法

什么是写时复制？
写时复制是并发中保证数据原子性的实现方式，将list集合复制到另一个长度+1的list集合中，再把数据添加到这个list最后，
底层用的是volatile和独占锁

都知道HashSet的底层是HashMap，为什么HashSet用的是add()而不是put？
其实底层还是用的HashMap的put()，但这里只关心key，至于value用的是Object常量

CountDownLatch、CyclicBarrier、Semaphore有什么区别？
CountDownLatch：做递减计数，用于在规定数量子线程执行完后再执行父线程；
CyclicBarrier：做累加计数，用于在规定数量线程执行完再统一执行；
Semaphore：信号量，用于共享资源互斥和并发量控制，底层用了AQS的共享锁

什么是BlockingQueue？
BlockingQueue是阻塞队列，常用的有ArrayBlockingQueue数组有界阻塞队列、
LinkedBlockingQueue链表理论有界阻塞队列（默认Integer类的最大值），也可以指定大小、
SynchronousQueue是一个同步队列，生产者消费者模式

线程池的实现方式有哪些？
常用的线程池有3种，
FixedThreadPool：创建一个指定大小的线程池；
SingleThreadExecutor：创建一个单一线程的线程池；
CachedThreadPool：创建一个自适应扩容的线程池
FixedThreadPool和SingleThreadExecutor的任务队列都是LinkedBlockingQueue，大小默认Integer类的最大值，
而CachedThreadPool虽然用的是SynchronousQueue，但是它的最大同时执行线程数是Integer类的最大值，所以
都容易导致OOM（内存不足），还是建议通过ThreadPoolExecutor手写线程池

ThreadPoolExecutor线程池7大参数
corePoolSize：核心线程数；
maximumPoolSize：最大同时执行线程数；
keepAliveTime：非核心线程存活时间；
unit：时间单位；
workQueue：任务队列，还未执行的任务；
threadFactory：用于创建线程的工厂；
handler：拒绝策略，队列满时且工作线程大于最大同时执行线程数时触发

线程池底层工作原理
首先有核心线程在处理任务，如果并发高起来了，会将后面的任务放到任务队列，当任务队列也满了的时候，
就会开启非核心线程来执行陆续进来的任务，直到工作线程大于最大同时执行线程数时，就会触发拒绝
策略，相反如果并发降下来了，按照非核心线程存活时间，关闭非核心线程

ThreadPoolExecutor线程池4大拒绝策略
AbortPolicy（默认）：抛出拒绝执行异常停止执行；
CallerRunsPolicy：调用者执行策略，将任务交给父线程执行；
DiscardOldestPolicy：抛弃队列等待最久的任务，并将当前任务添加到队列尝试再次执行；
DiscardPolicy：直接抛弃任务，不执行也不抛异常

Redis基本类型
String：可用于手机验证码的存取、分布式锁；
Hash：在Java中的泛型是Map<String,Map<Object,Object>>，可用于购物车场景搜集产品信息；
List：与Java的List不同，这里是一个双向链表，可以向左写入和向右写入，可以用于微信订阅公众号场景；
Set：它的取随机值命令可用于抽奖场景、自增自减命令可用于微信朋友圈点赞场景、取交集命令可用于微博好友共同关注、
取差集命令可用于QQ推荐可能认识的人
Zset：支持排序，可用于商品销量排序展示、热搜展示

Redis内存查看和设置
使用config get maxmemory和config set maxmemory查看和设置Redis内存，默认是0,0表示在64为操作系统中不限大小

Redis内存淘汰策略设置和查看
使用config get maxmemory-policy和config set maxmemory-policy查看和设置内存淘汰策略，默认是noeviction策略不删除key，
容易触发OOM，一般设置的话会选择allkeys-lru策略删除最久未使用的key

Redis过期键删除策略
定时删除：设置过期时间；
惰性删除：类似于懒加载，手动删除；
定期删除：在规定时间间隔内随机删除部分过期键

LRU算法实现方式
通过继承LinkedHashMap，底层有删除最久没有使用的key方法；
通过HashMap+DoubleLinkedList，类似于AQS的机制，Map构建节点，双向链表存放节点

