数据库索引优缺点及数据库优化
优点是提高数据查询效率；
缺点是会加大内存的消耗和减慢数据更新的效率；
优化数据库可以体现在：硬件上扩容、sql优化、表结构设计优化、索引优化

索引优化
把过滤性好的字段作为索引字段；
使用组合索引时，遵循索引最左原则；
无过滤、不索引；
避免非必要的查询字段；
避免索引字段做开头模糊查询；
避免索引字段使用函数；
避免索引字段使用不等于查询；
避免索引字段在范围查询之后；
避免索引字段使用is not null查询，可能会索引失效（由mysql优化器决定）;
使用explain关键字查看索引使用情况

order by优化
排序字段尽量是索引字段；
使用组合索引时，遵循索引最左原则；
无过滤不索引；
排序顺序要一致；
避免非必要的查询字段；
使用explain关键字查看是否出现filesort

索引失效有哪些原因？
没有遵循索引最左原则；
没有过滤条件；
索引字段做开头模糊查询；
索引字段使用函数；
索引字段使用不等于查询；
索引字段在范围查询之后；
索引字段使用is not null查询可能会索引失效（由mysql优化器决定）；
使用select *查询

什么是数据库三方式？
数据库三范式是设计数据库表的方法论，它要求字段不可再分，非主键字段都能依赖主键字段且不能间接依赖

jvm为什么要区分新生代和老年代，为什么要分eden区和survial区？
程序运行会产生海量临时对象，这些对象被临时放在新生代，新生代满了需要清理垃圾会把有效对象
复制到老年代，而为了区分哪些对象应该复制到老年代，所以在新生代划分了eden区和survial区，
最重要的是保证了内存空间连续

常见的远程调用
tcp和udp协议、http协议（基于tcp）、dubbo

类中有@transactional会影响全局的事物，要么全部成功，要么全部失败

springboot如何管理版本依赖
springboot使用maven管理依赖，通过pom文件的父子关系配置定义框架和版本号

什么是自动配置？
springboot提供了一些框架的默认配置来简化开发，通过在启动类加@SpringBootApplication来实现

什么是起步依赖？
就是指pom文件里依赖的starter，里面包含了相关的依赖和配置文件，不需要手动配置

jsp八大隐含对象
pageContext、request、session、application、response、out、config、page

什么是IOC控制反转？
是将对象的创建权交给spring容器

什么是DI依赖注入？
是将依赖的对象实例交给spring帮我们注入，用set()方法注入、构造方法注入、@Autowired自动注入

linux命令
常用的有cat、tail -f查看日志、nohup java -jar非挂断式启动程序、jps查看进程id、kill -9关进程、
jinfo -flags查看JVM参数配置、jstack查看进程堆栈信息、top查看系统的CPU、内存占用和负载均衡、
free -m查看内存、df -h查看磁盘

针对高并发高可用的处理方式
日志溯源寻找瓶颈、业务拆分、硬件扩容

数据库连接池的工作机制
创建数据库连接放到连接池，设置最大、最小连接数，最小连接数保证与数据库的连接，超过最小连接数的空闲连接会被回收

什么是对称加密算法？
对称加密算法是加密和解密用同一个秘钥，例如DES、AES

实例初始化过程
类加载时：加载静态变量或方法、加载静态代码块
实例化对象时：加载非静态变量或方法、加载非静态代码块、加载无参构造方法（最后）

哪些方法不可以被重写？
static方法、final方法、private方法

@WebFilter(filterName = "xxx", urlPatterns = { "/*" })
用于将当前类设置为过滤器，在程序启动的时候根据配置对request、response做预处理（设置编码格式）

jvm运行时数据区域包含哪些？
堆：存放对象的实例
虚拟机栈：存放局部变量和对象引用、方法的执行
本地方法栈：跟虚拟机栈相似，虚拟机栈是处理java服务的，本地方法栈是处理系统本地的方法（native修饰的），
比如获取系统CPU核数、当前系统时间戳、手动垃圾回收
方法区：存放类的信息、常量和静态变量，java8之前被称为永久代（用虚拟机内存），java8之后是元空间（用系统本地内存）
程序计数器：用于计算程序下一条需要执行的字节码指令

多线程的实现方法
继承Thread类，重写run()；
实现Runnable接口（无返回值、没申明异常），重写run()；
实现Callable接口（带返回值、有申明异常），重写call()，因为Thread类没有直接实现Callable的方法，
需要通过FutureTask，而FutureTask实现了Runnable接口；
通过java自带的ExecutorService创建线程池;
通过ThreadPoolExecutor手写线程池

isDone()
isDone()返回Callable线程是否执行完成

线程池和线程的区别什么？
线程是单一的，线程池是一群线程的集体，效率上来看，单一的线程会频繁地创建、销毁和线程间来回唤醒，资源消耗大，
线程池能将这些线程复用可以避免这种情况，而且它还能控制最大并发量，底层是阻塞队列

同步的实现方法
阻塞：使用synchronized同步代码块、lock同步锁
非阻塞：变量使用volatile关键字修饰（不保证数据原子性）、CAS

synchronized和lock的区别是什么？
synchronized是关键字，它属于JVM，自带正常释放和异常释放，不需要手动释放锁；
lock是JUC中locks包下的接口，lock需要手动释放锁；
synchronized是非公平锁，lock支持公平锁和非公平锁，默认非公平锁；
synchronized不可以中断被阻塞的线程；
synchronized只支持随机唤醒线程，lock通过Condition接口可以精确唤醒线程；
synchronized是独占锁，lock支持独占锁和共享锁，写锁是独占锁，读锁是共享锁

Condition接口
Condition接口是JUC中locks包下的接口，通过它的await()/signal()可以精确唤醒线程

interrupt()方法的作用
用于中断被阻塞的线程

yield()的作用
同级别线程让步，将当前线程从运行状态改成可运行状态

多线程中start()方法和run()方法的区别是什么？
start()方法是用来启动线程的，run()方法里面是具体执行的代码

Lock()和tryLock()的区别？
lock()没有返回值，获取锁失败会被阻塞；
tryLock()带返回值，可以设置过期时间，超过过期时间还没获得锁会返回false，可以避免阻塞

什么是CountdownLatch？
CountdownLatch做递减计数，用于在规定数量子线程执行完后再执行父线程

什么是ReentrantLock？
ReentrantLock是一种锁的实现，是悲观锁、独占锁、可重入锁，它支持公平锁和非公平锁，默认是非公平锁

什么是ReadWriteLock？
ReadWriteLock是读写分离的锁，读锁是共享锁，写锁是独占锁，在并发中既能保证写数据的原子性又不影响读
的性能

公平锁和非公平锁的区别？
公平锁是线程平均分配锁然后按获取锁的顺序执行，线程唤醒的开销大，性能低；
非公平锁是线程随机获取锁，谁先拿到锁谁就先执行，性能高

什么是可重入锁和不可重入锁？
可重入锁又叫递归锁，当前线程可以再次获取已经拥有的锁，而不可重入锁是当前线程要再次获取已经拥有的锁会导致死锁

分布式锁实现方式
通过数据库表，设置主键锁id，加锁插入一条记录，释放锁删除一条记录；
通过Redis缓存，可以用RedisTemplate加锁和设置过期时间同时进行，然后释放锁用LUA脚本或者Redis事务去处理，
还有一种针对Redis集群的Redisson分布式锁

Redis持久化实现方式
通过默认的RDB方式，在规定时间间隔内把数据快照写入磁盘实现持久化；
通过AOF方式，在AOF文件追加Redis命令实现持久化，这种的好处是可以在服务宕机的情况重放AOF文件恢复数据

什么是NIO？
NIO是相对于传统Stream流更高效的IO操作，ByteBuffer.allocateDirect()可以在本地内存分配缓冲区，避免数据拷贝

什么是数据库事务
数据库事物是把一组数据库操作当做一个不可分割的单元来执行，保证数据库的一致性，事务有4大特性：
原子性，事务要么同时成功要么同时失败；
一致性，事务将数据库从一种一致状态到另一种一致状态；
隔离性，事务间相互隔离；
持久性，事务一旦成功会永久保存在数据库
事务的4大隔离级别：
读未提交，当前事务可以读取其他事物未提交的数据，容易发生脏读；
读已提交，事务只能读取其它事务已经提交的数据，解决了脏读，但可能发生不可重复读；
可重复读，当前事务多次查询同一条记录是一致的，解决了不可重复读，但可能发生幻读；
串行化，事务串行执行，最高的隔离级别，同时解决了脏读、不可重复读和幻读

SpringMVC执行原理
客户端的请求会提交到前端控制器，它会根据请求的URL把请求交给对应的控制器，控制器执行方法后生成ModelAndView对象，
最后返回给前端控制器

Mybatis执行原理
配置数据库连接信息后，Mybatis通过SqlSessionFactory创建SqlSession，通过SqlSession执行SQL，Mybatis会进行参数映射和
结果映射，最后返回java对象

常用的集合有哪些？
List（允许为空）：
ArrayList数组集合，有序允许重复，查询快；
LinkedList链表集合，无序不允许重复，增删快；
Vector线程安全的数组集合
Set（不允许重复）：
HashSet，HashMap结构不保证插入顺序；
LinkedHashSet，HashSet+链表结构保证插入顺序；
可以用Hashtable充当线程安全Set集合
Map（key不允许重复）：
HashMap，Hashtable结构不保证插入顺序，key/value允许为空；
LinkedHashMap，HashMap+链表结构保证插入顺序或访问顺序，key/value允许为空；
Hashtable、ConcurrentHashMap线程安全的Map集合
