BeanFactory和ApplicationContext的区别
它们都是Spring容器，ApplicationContext继承了BeanFactory，BeanFactory简单的实现了实例化Bean和获取Bean，
而ApplicationContext增加了AOP、消息响应和访问资源

Spring设计模式有哪些
1、工厂模式：Spring通过BeanFactory()创建对象
2、单例模式：Spring默认是单例
3、代理模式：Spring AOP用到了JDK动态代理和CGLIB字节码生成技术
4、适配器模式：Spring MVC和Spring AOP都用到了适配器模式
5、桥接模式：数据库连接

SpringMVC执行原理
客户端的请求会提交到前端控制器，再由处理器映射器找到处理请求的处理器，执行方法和返回ModelAndView，
然后视图解析器解析后返回视图，最后前端控制器渲染视图后将结果显示到客户端完成请求

Mybatis执行原理
通过xml文件或注解的方式将java对象和动态参数进行映射生成sql语句，再由mybatis执行sql得到结果后映射成java对象返回

静态方法和实例方法的区别
静态方法属于类，用类.方法名（），不能访问非静态成员
实例方法属于对象，用对象.方法名（），可以访问静态成员

常用的集合类有哪些
list：实现类有ArrayList（查询快）、LinkedList（增删快）、vctor（线程安全）
map：实现类有HashMap、TreeMap（有序）、LinkedHashMap（有序）、HashTable（线程安全）
set：实现类有HashSet，底层是HashMap、TreeSet（有序），底层是TreeMap、LinkedHashSet（有序），底层是LinkedHashMap
集合转数组：toArray（）
数组转集合：Arrays.asList（）
集合去重：实例化一个set集合，再用addAll（）快速去重

悲观锁与乐观锁的区别
悲观锁默认每次查询数据都会修改，性能低，适用于修改频繁的场景
乐观锁默认数据不会修改，只在提交修改操作的时候检查数据是否被修改，性能高，适用于读取频繁的场景

什么是死锁？如何避免
两个线程互相等待对方释放锁导致程序不能继续执行，可以将加锁顺序设置一致避免死锁

什么是消息队列
用于高并发场景，将不需要马上执行的业务提取出来，等主流程执行完毕后发送消息到消息容器通知其它线程执行，可以降低业务间的耦合

git svn区别
git是分布式服务器，svn是集中服务器，git可用性更高

Spring中Bean的生命周期
实例化>属性赋值>初始化>销毁

springboot自动装配原理
通过@SpringBootConfiguration

AOP增强方式
前置增强>后置增强>返回增强>异常增强>环绕增强

数据库特性
原子性、一致性、隔离性、持久性

数据库隔离级别
读未提交>读已提交（线程安全）>可重复读（线程安全、高并发）>串行化（线程安全）

redis持久化
redis数据存放在内存中，重启后数据会丢失，所以需要将数据保存到磁盘中，当redis重启可以将数据从磁盘中恢复

对jvm的了解
java虚拟机，程序是在java虚拟机运行，一个程序可以有多个线程同时执行

redis
@Cacheable查询、@CachePut添加、@CacheEvict修改和删除、redisTemplate.opsForValue()的set()方法设置有效时间和get()方法
获取值

mybatis plus特性
@TableId(type = IdType.AUTO)主键策略、@TableField(fill = FieldFill.INSERT)和@TableField(fill = FieldFill.INSERT_UPDATE)自动填充、
@Version加乐观锁插件实现乐观锁、@TableLogic逻辑删除、BaseMapper自带curd方法 、QueryWrapper接口实现复杂查询、防止sql注入、内置分页插件、
内置性能分析插件，可输出sql语句和执行时间，能有效解决慢查询

跨域
访问协议、IP地址、端口号任何一个不一样就会产生跨域

解决跨域的方法
1、nginx+@CrossOrigin（Controller类中）
2、gateway网关+nacos注册中心，添加跨域插件和设置路由

SpringCloud
nacos注册中心、feign服务调用、gatway网关

RabbitMQ
业务层调用rabbitTemplate方法发送消息，监听器@RabbitListener监听到就会执行相关操作

Docker
docker pull下载镜像、docker run创建容器

阿里云OSS
对象存储服务器
